#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
PACKAGE = "teraranger_evo_cfg"

gen = ParameterGenerator()

output_mode_enum = gen.enum([gen.const("Binary", int_t, 0, "Enable binary mode"),
                             gen.const("Text", int_t, 1, "Enable text mode")],
                            "Set the output mode")

rate_enum = gen.enum([gen.const("ASAP", int_t, 0, "Send when all measurement available"),
                      gen.const("50", int_t, 1, "50 Hz"),
                      gen.const("100", int_t, 2, "100 Hz"),
                      gen.const("250", int_t, 3, "250 Hz"),
                      gen.const("500", int_t, 4, "500 Hz"),
                      gen.const("600", int_t, 5, "600 Hz")],
                     "Set the rate of update")

sequence_mode_enum = gen.enum([gen.const("Crosstalk", int_t, 0, "Allows crosstalk"),
                               gen.const("Anti_crosstalk", int_t, 1, "Prevents crosstalk"),
                               gen.const("Tower_mode", int_t, 2, "Prevents crosstalk for tower layout")],
                              "Set the sensor firing mode")

imu_enum = gen.enum([gen.const("OFF", int_t, 0, "IMU disabled"),
                     gen.const("QUAT", int_t, 1, "Quaternion mode"),
                     gen.const("EULER", int_t, 2, "Euler mode"),
                     gen.const("QUATLIN", int_t, 3, "Quaternion and linear mode")],
                    "Set the IMU mode")

sensor_type_enum = gen.enum([gen.const("EVO_600HZ", int_t, 0, "Evo 600 Hz"),
                             gen.const("EVO_60M", int_t, 1, "Evo 60 m"),
                             gen.const("EVO_3M", int_t, 2, "Evo 3 m"),
                             gen.const("EVO_MINI", int_t, 3, "Evo Mini"),
                             gen.const("EVO_40M", int_t, 4, "Evo 40 m"),
                             gen.const("EVO_15M", int_t, 5, "Evo 15 m")],
                            "Set the type of the sensor")


gen.add("Output_Mode", int_t, 0, "Set the output mode", 0, 0, 1, edit_method=output_mode_enum)
gen.add("Rate", int_t, 1, "Set the rate", 0, 0, 5, edit_method=rate_enum)
gen.add("IMU_mode", int_t, 2, "Set imu mode", 0, 0, 3, edit_method=imu_enum)
gen.add("Sequence_mode", int_t, 3, "Set the firing sequence", 0, 0, 2, edit_method=sequence_mode_enum)
gen.add("Sensor_type_port_0", int_t, 4, "Set the sensor type", 1, 0, 5, edit_method=sensor_type_enum)
gen.add("Sensor_type_port_1", int_t, 4, "Set the sensor type", 1, 0, 5, edit_method=sensor_type_enum)
gen.add("Sensor_type_port_2", int_t, 4, "Set the sensor type", 1, 0, 5, edit_method=sensor_type_enum)
gen.add("Sensor_type_port_3", int_t, 4, "Set the sensor type", 1, 0, 5, edit_method=sensor_type_enum)
gen.add("Sensor_type_port_4", int_t, 4, "Set the sensor type", 1, 0, 5, edit_method=sensor_type_enum)
gen.add("Sensor_type_port_5", int_t, 4, "Set the sensor type", 1, 0, 5, edit_method=sensor_type_enum)
gen.add("Sensor_type_port_6", int_t, 4, "Set the sensor type", 1, 0, 5, edit_method=sensor_type_enum)
gen.add("Sensor_type_port_7", int_t, 4, "Set the sensor type", 1, 0, 5, edit_method=sensor_type_enum)

exit(gen.generate(PACKAGE, "teraranger_evo_cfg", "TerarangerHubEvo"))
